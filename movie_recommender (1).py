# -*- coding: utf-8 -*-
"""movie_recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13SOEIbliKMjTRlwI7YwbjCqFWd700P_c
"""

import pandas as pd
import numpy as np
from sklearn.neighbors import NearestNeighbors

ratings = pd.read_csv('/content/moviedata/ratings.csv', usecols=['userId','movieId','rating'])
movies = pd.read_csv('/content/moviedata/movies.csv', usecols=['movieId','title'])
ratings2 = pd.merge(ratings, movies, how='inner', on='movieId')

"""Creating a dataframe with rows as movies and userId as columns"""

data = ratings2.pivot_table(index='title',columns='userId',values='rating').fillna(0)

data_copy = data.copy()

def recommender_util(user, no_movies):
  recommendations = []
  
  for i in data[data[user] == 0].index.tolist():
    index_movie = data.index.tolist().index(i)
    predicted_rating = data.iloc[index_movie, data.columns.tolist().index(user)]
    recommendations.append((i, predicted_rating))

  sorted_rm = sorted(recommendations, key=lambda x:x[1], reverse=True)
  print("I suggest you to watch these: \n")
  order = 1
  for i in sorted_rm[:no_movies]:
      print('{}: {} - predicted rating:{}'.format(order, recommendations[0], recommendations[1]))
      order += 1

def recommender(user, no_neighbors, no_movies):
  #here user is userId to recommend to
  #no_neighbors is number of neighbors to consider
  #no_movies is number of movies to recommend

  knn = NearestNeighbors(metric='cosine', algorithm='brute')
  knn.fit(data.values)
  distances, indices = knn.kneighbors(data.values, n_neighbors=no_neighbors) 
  #distances is a array of no_neighbors number of close cosine similarities from a movie
  #indices stores index of close by movies

  user_index = data.columns.tolist().index(user) #get index of the user

  for movie, title in list(enumerate(data.index)):
    #if user hasn't rated a movie
    if data.iloc[movie, user_index] == 0:
      sim_movies = indices[movie].tolist()
      movie_distances = distances[movie].tolist()

      #removing the unrated selected movie from the indices 
      if movie in sim_movies:
        id_movie = sim_movies.index(movie)
        sim_movies.remove(movie)
        movie_distances.pop(id_movie)
      #if the percentage of ratings in the dataset is very low, there are too many 0s in the dataset. 
      # Some movies have all 0 ratings and the movies with all 0s are considered the same movies by NearestNeighbors(). 
      # Then,even the movie itself cannot be included in the indices. 
      # In that case, we take off the farthest movie in the list.
      else:
        sim_movies = sim_movies[:no_neighbors-1]
        movie_distances = movie_distances[:no_neighbors-1]

      #calculate predicted ratings using weighted average
      movie_similarity = [1-i for i in movie_distances ]
      movie_similarity_copy = movie_similarity.copy()
      numerator = 0

      # for all simiar movies
      for s in range(0, len(movie_similarity)):
        #check if rating of similar movies is 0
        if data.iloc[sim_movies[s], user_index] == 0:
          # if the rating is zero, ignore the rating and the similarity in calculating the predicted rating
          if len(movie_similarity_copy) == (no_neighbors - 1):
            movie_similarity_copy.pop(s)
          
          else:
            movie_similarity_copy.pop(s-(len(movie_similarity)-len(movie_similarity_copy)))
        
        else:
          numerator += movie_similarity[s]*data.iloc[sim_movies[s],user_index]
      
      if len(movie_similarity_copy) > 0:
        if sum(movie_similarity_copy) > 0:
          predicted_rating = numerator/sum(movie_similarity_copy)
        
        else:
          predicted_rating = 0

      else:
        predicted_rating = 0
      # place the predicted rating into the copy of the original dataset
      data.iloc[movie,user_index] = predicted_rating
  recommender_util(user, no_movies)

recommender(15, 10, 10)